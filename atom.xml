<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KIKI</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kiki.website/blog/"/>
  <updated>2018-11-17T09:58:29.556Z</updated>
  <id>http://kiki.website/blog/</id>
  
  <author>
    <name>Scoripion</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git</title>
    <link href="http://kiki.website/blog/2018/09/17/Git/"/>
    <id>http://kiki.website/blog/2018/09/17/Git/</id>
    <published>2018-09-17T09:56:44.000Z</published>
    <updated>2018-11-17T09:58:29.556Z</updated>
    
    <content type="html"><![CDATA[<!-- GFM-TOC --><ul><li><a href="#集中式与分布式">集中式与分布式</a></li><li><a href="#中心服务器">中心服务器</a></li><li><a href="#工作流">工作流</a></li><li><a href="#分支实现">分支实现</a></li><li><a href="#冲突">冲突</a></li><li><a href="#fast-forward">Fast forward</a></li><li><a href="#分支管理策略">分支管理策略</a></li><li><a href="#储藏stashing">储藏（Stashing）</a></li><li><a href="#ssh-传输设置">SSH 传输设置</a></li><li><a href="#gitignore-文件">.gitignore 文件</a></li><li><a href="#git-命令一览">Git 命令一览</a></li><li><a href="#参考资料">参考资料</a><!-- GFM-TOC --></li></ul><h1 id="集中式与分布式"><a href="#集中式与分布式" class="headerlink" title="集中式与分布式"></a>集中式与分布式</h1><p>Git 属于分布式版本控制系统，而 SVN 属于集中式。</p><p>集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上就有一份完整的代码。</p><p>集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了。</p><p>集中式版本控制需要连网才能工作，如果网速过慢，那么提交一个文件的会慢的无法让人忍受。而分布式版本控制不需要连网就能工作。</p><p>分布式版本控制新建分支、合并分支操作速度非常快，而集中式版本控制新建一个分支相当于复制一份完整代码。</p><h1 id="中心服务器"><a href="#中心服务器" class="headerlink" title="中心服务器"></a>中心服务器</h1><p>中心服务器用来交换每个用户的修改，没有中心服务器也能工作，但是中心服务器能够 24 小时保持开机状态，这样就能更方便的交换修改。</p><p>Github 就是一个中心服务器。</p><h1 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h1><p><div align="center"> <img src="../pics//a1198642-9159-4d88-8aec-c3b04e7a2563.jpg"> </div><br></p><p>新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它属于 Git 的版本库。</p><p>Git 版本库有一个称为 stage 的暂存区，还有自动创建的 master 分支以及指向分支的 HEAD 指针。</p><p><div align="center"> <img src="../pics//46f66e88-e65a-4ad0-a060-3c63fe22947c.png"> </div><br></p><ul><li>git add files 把文件的修改添加到暂存区</li><li>git commit 把暂存区的修改提交到当前分支，提交之后暂存区就被清空了</li><li>git reset – files 使用当前分支上的修改覆盖暂缓区，用来撤销最后一次 git add files</li><li>git checkout – files 使用暂存区的修改覆盖工作目录，用来撤销本地修改</li></ul><p><div align="center"> <img src="../pics//17976404-95f5-480e-9cb4-250e6aa1d55f.png"> </div><br></p><p>可以跳过暂存区域直接从分支中取出修改，或者直接提交修改到分支中。</p><ul><li>git commit -a 直接把所有文件的修改添加到暂缓区然后执行提交</li><li>git checkout HEAD – files 取出最后一次修改，可以用来进行回滚操作</li></ul><h1 id="分支实现"><a href="#分支实现" class="headerlink" title="分支实现"></a>分支实现</h1><p>使用指针将每个提交连接成一条时间线，HEAD 指针指向当前分支指针。</p><p><div align="center"> <img src="../pics//fb546e12-e1fb-4b72-a1fb-8a7f5000dce6.jpg"> </div><br></p><p>新建分支是新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支表示新分支成为当前分支。</p><p><div align="center"> <img src="../pics//bc775758-89ab-4805-9f9c-78b8739cf780.jpg"> </div><br></p><p>每次提交只会让当前分支指针向前移动，而其它分支指针不会移动。</p><p><div align="center"> <img src="../pics//5292faa6-0141-4638-bf0f-bb95b081dcba.jpg"> </div><br></p><p>合并分支也只需要改变指针即可。</p><p><div align="center"> <img src="../pics//1164a71f-413d-494a-9cc8-679fb6a2613d.jpg"> </div><br></p><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h1><p>当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突。</p><p><div align="center"> <img src="../pics//58e57a21-6b6b-40b6-af85-956dd4e0f55a.jpg"> </div><br></p><p>Git 会使用 &lt;&lt;&lt;&lt;&lt;&lt;&lt; ，======= ，&gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记出不同分支的内容，只需要把不同分支中冲突部分修改成一样就能解决冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><h1 id="Fast-forward"><a href="#Fast-forward" class="headerlink" title="Fast forward"></a>Fast forward</h1><p>“快进式合并”（fast-farward merge），会直接将 master 分支指向合并的分支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支信息。</p><p>可以在合并时加上 –no-ff 参数来禁用 Fast forward 模式，并且加上 -m 参数让合并时产生一个新的 commit。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><p><div align="center"> <img src="../pics//dd78a1fe-1ff3-4bcf-a56f-8c003995beb6.jpg"> </div><br></p><h1 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h1><p>master 分支应该是非常稳定的，只用来发布新版本；</p><p>日常开发在开发分支 dev 上进行。</p><p><div align="center"> <img src="../pics//245fd2fb-209c-4ad5-bc5e-eb5664966a0e.jpg"> </div><br></p><h1 id="储藏（Stashing）"><a href="#储藏（Stashing）" class="headerlink" title="储藏（Stashing）"></a>储藏（Stashing）</h1><p>在一个分支上操作之后，如果还没有将修改提交到分支上，此时进行切换分支，那么另一个分支上也能看到新的修改。这是因为所有分支都共用一个工作区的缘故。</p><p>可以使用 git stash 将当前分支的修改储藏起来，此时当前工作区的所有修改都会被存到栈上，也就是说当前工作区是干净的，没有任何未提交的修改。此时就可以安全的切换到其它分支上了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state \ &quot;WIP on master: 049d078 added the index file&quot;</span><br><span class="line">HEAD is now at 049d078 added the index file (To restore them type &quot;git stash apply&quot;)</span><br></pre></td></tr></table></figure><p>该功能可以用于 bug 分支的实现。如果当前正在 dev 分支上进行开发，但是此时 master 上有个 bug 需要修复，但是 dev 分支上的开发还未完成，不想立即提交。在新建 bug 分支并切换到 bug 分支之前就需要使用 git stash 将 dev 分支的未提交修改储藏起来。</p><h1 id="SSH-传输设置"><a href="#SSH-传输设置" class="headerlink" title="SSH 传输设置"></a>SSH 传输设置</h1><p>Git 仓库和 Github 中心仓库之间的传输是通过 SSH 加密。</p><p>如果工作区下没有 .ssh 目录，或者该目录下没有 id_rsa 和 id_rsa.pub 这两个文件，可以通过以下命令来创建 SSH Key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>然后把公钥 id_rsa.pub 的内容复制到 Github “Account settings” 的 SSH Keys 中。</p><h1 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h1><p>忽略以下文件：</p><ul><li>操作系统自动生成的文件，比如缩略图；</li><li>编译生成的中间文件，比如 Java 编译产生的 .class 文件；</li><li>自己的敏感信息，比如存放口令的配置文件。</li></ul><p>不需要全部自己编写，可以到 <a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a> 中进行查询。</p><h1 id="Git-命令一览"><a href="#Git-命令一览" class="headerlink" title="Git 命令一览"></a>Git 命令一览</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- GFM-TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#集中式与分布式&quot;&gt;集中式与分布式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#中心服务器&quot;&gt;中心服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#工作流&quot;&gt;工作流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第一波</title>
    <link href="http://kiki.website/blog/2018/05/08/first-article/"/>
    <id>http://kiki.website/blog/2018/05/08/first-article/</id>
    <published>2018-05-07T16:00:00.000Z</published>
    <updated>2018-11-17T06:25:11.417Z</updated>
    
    <content type="html"><![CDATA[<p>试一试!!</p><h1 id="Scoripion-balabala"><a href="#Scoripion-balabala" class="headerlink" title="Scoripion balabala"></a>Scoripion balabala</h1><h2 id="i-NEED-oQ"><a href="#i-NEED-oQ" class="headerlink" title="i NEED oQ"></a>i NEED oQ</h2><p><img src="https://d3cbihxaqsuq0s.cloudfront.net/images/17935469_xl.jpg" alt="View"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;试一试!!&lt;/p&gt;
&lt;h1 id=&quot;Scoripion-balabala&quot;&gt;&lt;a href=&quot;#Scoripion-balabala&quot; class=&quot;headerlink&quot; title=&quot;Scoripion balabala&quot;&gt;&lt;/a&gt;Scoripion balabala&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
